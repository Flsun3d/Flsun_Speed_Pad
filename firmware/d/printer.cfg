# To create the Firmware you need to use the following configuration:
#     - Micro-controller: STM32
#     - Processor model: STM32F103
#     - Bootloader offset: 32KiB
#     - Communication interface: Serial (on USART1 PA10/PA9)
#
# To install the Firmware rename the klipper bin to `main_board_20xxxxxx.bin`
# and copy it to an SD Card.
# Power off the Printer, insert the SD Card and power it on.
# It should beep several times and the LCD should be stuck on the Splash screen.
# Now you should be able to connect to the Printer, you might need to change
# the mcu/serial setting in this config according to your set up.
#
# If you want to revert the Firmware back to Marlin you simply need to flash it
# with a firmware through the SD Card
#Pad-Vol:1.2
#2023-03-03

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA7
position_min: -3
position_endstop: -3
position_max: 245
homing_speed: 30.0

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC13
microsteps: 16
rotation_distance: 32
endstop_pin: !PC5
position_min: -17
position_endstop: -17
position_max: 245
homing_speed: 30.0

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC14
microsteps: 16
rotation_distance: 8
endstop_pin: PB2
position_endstop: 0.0
position_max: 260
position_min: -6
homing_speed: 5.0

[stepper_z1]
step_pin: PC0
dir_pin: !PC1
enable_pin: !PC15
microsteps: 16
rotation_distance: 8
endstop_pin: PC6

[extruder]
step_pin: PB4
dir_pin: !PB3
enable_pin: !PA15
microsteps: 16
rotation_distance: 22.6789511               #has to be calibrated by everyone
gear_ratio: 50:17
full_steps_per_rotation: 200
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC4
control: pid
pid_kp: 28.937
pid_ki: 1.295
pid_kd: 161.688
min_temp: 0
max_temp: 265
max_extrude_cross_section: 60 
max_extrude_only_distance: 600

[heater_fan extruder_fan]
pin: PB1

[heater_bed]
heater_pin: PA4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PB0
control: pid
pid_kp: 67.648
pid_ki: 1.044
pid_kd: 1095.893
min_temp: 0
max_temp: 115

[fan]
pin: PA0

#[include adxl345.cfg] # load ADXL345 module ,Uncomment it before using ADXL345

[input_shaper]
shaper_freq_x: 25.00  # frequency for the X mark of the test model
shaper_freq_y: 23.29  # frequency for the Y mark of the test model

[probe]
pin: !PB12
z_offset: 0
activate_gcode:
    probe_reset

[output_pin probe_reset_pin]
pin: PB13

[bed_mesh]
speed: 100
horizontal_move_z: 5
mesh_min: 15, 15
mesh_max: 230, 230
probe_count: 7, 7
mesh_pps: 2, 3
algorithm: bicubic

[filament_switch_sensor filament_sensor]
pause_on_runout: True
runout_gcode: PAUSE # pause when filament runout
#insert_gcode: RESUME  
switch_pin: PA5

[mcu]
serial: /dev/serial/by-path/platform-5200000.ehci1-controller-usb-0:1.4:1.0-port0
baud: 115200
restart_method: command

[safe_z_home]
home_xy_position: 147, 154
speed: 75
z_hop: 5
z_hop_speed: 5
move_to_previous: true

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 10
max_z_accel: 100

[gcode_macro probe_reset]
gcode:
    SET_PIN PIN=probe_reset_pin VALUE=0
    G4 P300
    SET_PIN PIN=probe_reset_pin VALUE=1
    G4 P100

[gcode_macro bed_level]
gcode:
  SET_GCODE_OFFSET Z=0
  G28
  bed_mesh_calibrate
  save_config
	
[virtual_sdcard]
path: ~/gcode_files

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(90) %}      #edit to your park position
    {% set y = params.Y|default(90) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]  
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% if printer["filament_switch_sensor filament_sensor"].filament_detected == True %} # detect if occur filament runout ,True : filament exists.  False:filament runout
      {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
      {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
      {%else %}
        {% set get_params = "" %}
      {% endif %}
    ##### end of definitions #####
      G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E{e} F2100
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}   
      RESUME_BASE {get_params}
    {% endif %} 

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  M106 S0
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G28

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
   SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro UNLOAD_FILAMENT] #unload filament
gcode:
    G91
    G1 E-500 F150
    G90

[gcode_macro LOAD_FILAMENT] #load filament
gcode:
    G91
    G1 E400 F150
    G1 E100 F50
    G90

[save_variables]
filename: ~/savedVariables1.cfg

[gcode_macro save_time]
gcode:
    {% if printer.save_variables.variables.total_time %}
        {% set print_time = printer.save_variables.variables.total_time %}
    {% else %} 
        {% set print_time = 0 %}
    {% endif %}
    {% set print_time = print_time + printer.print_stats.print_duration/3600 %}
    SAVE_VARIABLE VARIABLE=total_time VALUE={print_time}

[gcode_macro SET_GCODE_OFFSET]  
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
        {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|

[display_status]